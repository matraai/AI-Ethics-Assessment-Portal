import type { BuilderContent } from "../../../types/builder-content";
import type { Dictionary } from "../../../types/typescript";
declare const _default: import("vue").DefineComponent<Readonly<{
    data?: any;
    context?: any;
    content?: any;
    apiKey?: any;
    model?: any;
    canTrack?: any;
    locale?: any;
    apiHost?: any;
    trustedHosts?: any;
    showContent?: any;
    enrich?: any;
    contentWrapper?: any;
    contentWrapperProps?: any;
    isNestedRender?: any;
    builderContextSignal?: any;
}>, unknown, {
    hasExecuted: boolean;
    ContentWrapper: any;
    httpReqsData: {};
    httpReqsPending: {};
    clicked: boolean;
    builderContext: {
        Builder: {
            content: null;
            context: {};
            localState: undefined;
            rootSetState(): void;
            rootState: {};
            apiKey: null;
            apiVersion: undefined;
            componentInfos: {};
            inheritedStyles: {};
            BlocksWrapper: string;
            BlocksWrapperProps: {};
            nonce: string;
            model: string;
        };
        key: symbol;
    };
    needsElementRefDivForEditing: () => boolean;
    getWrapperClassName: (variationId?: string | undefined) => string;
}, {
    showContentProps(): {
        hidden?: undefined;
        "aria-hidden"?: undefined;
    } | {
        hidden: boolean;
        "aria-hidden": boolean;
    };
    onUpdateHook0(): {
        0: any;
    };
    onUpdateHook1(): {
        0: any;
    };
    onUpdateHook2(): {
        0: any;
    };
    onUpdateHook3(): {
        0: any;
    };
}, {
    mergeNewRootState(newData: Dictionary<any>): void;
    mergeNewContent(newContent: BuilderContent): void;
    processMessage(event: MessageEvent): void;
    onClick(event: any): void;
    runHttpRequests(): void;
    emitStateUpdate(): void;
    elementRef_onIniteditingbldr(event: any): void;
    elementRef_onInitpreviewingbldr(event: any): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<Readonly<{
    data?: any;
    context?: any;
    content?: any;
    apiKey?: any;
    model?: any;
    canTrack?: any;
    locale?: any;
    apiHost?: any;
    trustedHosts?: any;
    showContent?: any;
    enrich?: any;
    contentWrapper?: any;
    contentWrapperProps?: any;
    isNestedRender?: any;
    builderContextSignal?: any;
}>>>, {
    readonly data?: any;
    readonly context?: any;
    readonly content?: any;
    readonly apiKey?: any;
    readonly model?: any;
    readonly canTrack?: any;
    readonly locale?: any;
    readonly apiHost?: any;
    readonly trustedHosts?: any;
    readonly showContent?: any;
    readonly enrich?: any;
    readonly contentWrapper?: any;
    readonly contentWrapperProps?: any;
    readonly isNestedRender?: any;
    readonly builderContextSignal?: any;
}, {}>;
export default _default;
