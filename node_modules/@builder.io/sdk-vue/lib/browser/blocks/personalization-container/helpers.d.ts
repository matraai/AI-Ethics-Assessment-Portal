import type { BuilderBlock } from '../../types/builder-block';
import type { PersonalizationContainerProps } from './personalization-container.types';
export type UserAttributes = {
    date?: string | Date;
    urlPath?: string;
    [key: string]: any;
};
type QueryOperator = 'is' | 'isNot' | 'contains' | 'startsWith' | 'endsWith' | 'greaterThan' | 'lessThan' | 'greaterThanOrEqualTo' | 'lessThanOrEqualTo';
type QueryValue = string | number | boolean | Array<string | number | boolean>;
export type Query = {
    property: string;
    operator: QueryOperator;
    value: QueryValue;
};
export declare function checkShouldRenderVariants(variants: PersonalizationContainerProps['variants'], canTrack: boolean): boolean;
export declare function getBlocksToRender({ variants, previewingIndex, isHydrated, filteredVariants, fallbackBlocks }: {
    variants: PersonalizationContainerProps['variants'];
    previewingIndex?: number | null;
    isHydrated: boolean;
    filteredVariants: PersonalizationContainerProps['variants'];
    fallbackBlocks?: BuilderBlock[];
}): {
    blocks: BuilderBlock[];
    path: string | undefined;
};
export declare const getPersonalizationScript: (variants: PersonalizationContainerProps['variants'], blockId: string, locale?: string) => string;
export { filterWithCustomTargeting } from './helpers/inlined-fns';
