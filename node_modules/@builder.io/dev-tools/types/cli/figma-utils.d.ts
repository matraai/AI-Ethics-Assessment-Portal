import { type Credentials, type FigmaAuth } from "./credentials";
import type { DevToolsSys, ExportType } from "../types";
import type { CLIArgs } from "./index";
import type { FigmaComponentInfo } from "$/ai-utils";
export interface FigmaBuilderLink {
    builderName: string;
    figmaName: string;
    figmaKey: string;
    figmaUrl?: string;
    inputMapper?: string;
    originalInputMapper?: string;
    exportType?: ExportType;
    importName?: string;
    importPath?: string;
    source: string;
    loc?: string;
}
export declare const REMOVE_EMOJI: RegExp;
export declare const parseFigmaURL: (str: string) => {
    fileID: string;
    nodeId: string;
} | null;
export declare const getFigmaNodeData: (sys: DevToolsSys, args: CLIArgs, auth: {
    access_token: string;
    oauth: boolean;
}, fileId: string, nodeIds: string, depth?: number) => Promise<any>;
export declare function getFigmaComponentName(name: string): string;
export declare function getImportDataFromToken(credentials: Credentials, token: string, verbose: boolean): Promise<(readonly [string, FigmaComponentInfo])[]>;
export declare function needsFigmaAuth(urls: string[]): boolean;
export declare function getFigmaNodeDataFromURLs(sys: DevToolsSys, args: CLIArgs, figmaAuth: {
    access_token: string;
    oauth: boolean;
} | undefined, builderAuth: {
    privateKey: string;
    spaceId: string;
}, urls: string[]): Promise<(readonly [string, FigmaComponentInfo])[]>;
export declare function inPlaceResolveFigmaURLs(sys: DevToolsSys, args: CLIArgs, figmaAuth: FigmaAuth, figmaBuilderLinks: FigmaBuilderLink[], figmaLinksToResolve: string[]): Promise<void>;
